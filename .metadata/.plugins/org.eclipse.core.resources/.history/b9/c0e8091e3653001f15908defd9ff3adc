package com.ashish.blog.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.ashish.blog.peyloads.ApiResponse;
import com.ashish.blog.peyloads.PostDto;
import com.ashish.blog.peyloads.PostResponse;
import com.ashish.blog.services.PostService;

@RestController
@RequestMapping("/api/posts")
public class PostController {

	@Autowired
	private PostService postService;

	@PostMapping("/user/{userId}/category/{categoryId}/posts")
	public ResponseEntity<PostDto> createPost(@RequestBody PostDto postDto, @PathVariable Integer userId,
			@PathVariable Integer categoryId) {
		PostDto createdPost = this.postService.createPost(postDto, userId, categoryId);
		return new ResponseEntity<>(createdPost, HttpStatus.CREATED);
	}

	//@GetMapping("/user/{userId}/posts")
	//public ResponseEntity<List<PostDto>> getPostsByUsers(@PathVariable Integer userId) {
		//List<PostDto> posts = this.postService.getPostsByUsers(userId);
		//return new ResponseEntity<>(posts, HttpStatus.OK);
	//}
	   @GetMapping("/user/{userId}/posts")
	    public ResponseEntity<PostResponse> getPostsByUsers(
	            @PathVariable Integer userId,
	            @RequestParam(defaultValue = "0") Integer pageNumber,
	            @RequestParam(defaultValue = "10") Integer pageSize) {

	        PostResponse postResponse = this.postService.getPostsByUsers(userId, pageNumber, pageSize);
	        return new ResponseEntity<>(postResponse, HttpStatus.OK);
	    }
	

	//@GetMapping("/category/{categoryId}/posts")
	//public ResponseEntity<List<PostDto>> getPostsByCategory(@PathVariable Integer categoryId) {
		//List<PostDto> posts = this.postService.getPostsByCategory(categoryId);
		//return new ResponseEntity<>(posts, HttpStatus.OK);
	//}
	
	   @GetMapping("/category/{categoryId}/posts")
	    public ResponseEntity<PostResponse> getPostsByCategory(
	            @PathVariable Integer categoryId,
	            @RequestParam(defaultValue = "0") Integer pageNumber,
	            @RequestParam(defaultValue = "10") Integer pageSize) {

	        PostResponse postResponse = this.postService.getPostsByCategory(categoryId, pageNumber, pageSize);
	        return new ResponseEntity<>(postResponse, HttpStatus.OK);
	    }

	// get all posts
	@GetMapping("/posts")
	public ResponseEntity<PostResponse> getAllPosts(
			@RequestParam(value = "pageNumber", defaultValue = "0", required = false)Integer pageNumber,
			@RequestParam(value = "pageSize", defaultValue = "10", required = false)Integer pageSize,
			@RequestParam(value = "sortBy", defaultValue = "postId", required = false) String sortBy
			) {
		PostResponse postResponse = this.postService.getAllPost(pageNumber, pageSize, sortBy);
		return new ResponseEntity<PostResponse>(postResponse, HttpStatus.OK);
	}

	// get posts details by id
	@GetMapping("/posts/{postId}")
	public ResponseEntity<PostDto> getPostById(@PathVariable Integer postId) {
		PostDto postDto = this.postService.getPostById(postId);
		return new ResponseEntity<>(postDto, HttpStatus.OK);
	}

	// Update a post
	@PutMapping("/posts/{postId}")
	public ResponseEntity<PostDto> updatePost(@RequestBody PostDto postDto, @PathVariable Integer postId) {
		PostDto updatedPost = this.postService.updatePost(postDto, postId);
		return new ResponseEntity<PostDto>(updatedPost, HttpStatus.OK);
	}

	// Delete a post
	@DeleteMapping("/posts/{postId}")
	public ApiResponse deletePost(@PathVariable Integer postId) {
		this.postService.deletePost(postId);
		return new ApiResponse("Post is successfully deleted!!", true); // 204 No Content
	}

}
